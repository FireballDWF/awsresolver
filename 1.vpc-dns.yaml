AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC in 2AZs using 10.x.0.0/16:"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
        Parameters:
          - ClassB
          - AvailabilityZoneA
          - AvailabilityZoneB

Parameters:
  ClassB:
    Description: "Class B of VPC (10.XXX.0.0/16)"
    Type: Number
    Default: 0
    ConstraintDescription: "Must be in the range [0-255]"
    MinValue: 0
    MaxValue: 255

  AvailabilityZoneA:
    Description: Availability Zone 1
    Type: AWS::EC2::AvailabilityZone::Name
  AvailabilityZoneB:
    Description: Availability Zone 2
    Type: AWS::EC2::AvailabilityZone::Name

Mappings:
  RegionMap:
    "ap-south-1":
      AMI: "ami-00796998f258969fd"
    "eu-west-3":
      AMI: "ami-04992646d54c69ef4"
    "eu-west-2":
      AMI: "ami-00ee3b59e07408c27"
    "eu-west-1":
      AMI: "ami-09693313102a30b2c"
    "ap-northeast-3":
      AMI: "ami-00f7ef6bf92e8f916"
    "ap-northeast-2":
      AMI: "ami-012566705322e9a8e"
    "ap-northeast-1":
      AMI: "ami-00f9d04b3b3092052"
    "sa-east-1":
      AMI: "ami-0112d42866980b373"
    "ca-central-1":
      AMI: "ami-05cac140c6a1fb960"
    "ap-southeast-1":
      AMI: "ami-01da99628f381e50a"
    "ap-southeast-2":
      AMI: "ami-00e17d1165b9dd3ec"
    "eu-central-1":
      AMI: "ami-02ea8f348fa28c108"
    "us-east-1":
      AMI: "ami-009d6802948d06e52"
    "us-east-2":
      AMI: "ami-02e680c4540db351e"
    "us-west-1":
      AMI: "ami-011b6930a81cd6aaf"
    "us-west-2":
      AMI: "ami-01bbe152bf19d0289"

Resources:
  thisVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub "10.${ClassB}.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value:
            Ref: "AWS::StackName"
        - Key: project
          Value: DNStest

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", ["AWS::StackName", IGW]]

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: thisVPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: thisVPC
      CidrBlock: !Sub "10.${ClassB}.0.0/22"
      AvailabilityZone:
        Ref: AvailabilityZoneA
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", Pub-A Subnet]]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: thisVPC
      CidrBlock: !Sub "10.${ClassB}.4.0/22"
      AvailabilityZone:
        Ref: AvailabilityZoneB
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", Pub-B Subnet]]

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: thisVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", Public Route Table]]

  DirectInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicSubnetRouteTable

  PublicASubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      SubnetId:
        Ref: PublicSubnetA

  PublicBSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      SubnetId:
        Ref: PublicSubnetB

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: thisVPC
      CidrBlock: !Sub "10.${ClassB}.8.0/21"
      AvailabilityZone:
        Ref: AvailabilityZoneA
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", Priv-A Subnet]]

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: thisVPC
      CidrBlock: !Sub "10.${ClassB}.16.0/21"
      AvailabilityZone:
        Ref: AvailabilityZoneB
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", Priv-B Subnet]]

  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: thisVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", Private Route Table]]

  NATEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  NATGateway:
    DependsOn: AttachGateway
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATEIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnetA

  NATInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway
      RouteTableId:
        Ref: PrivateSubnetRouteTable

  PrivateASubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTable
      SubnetId:
        Ref: PrivateSubnetA

  PrivateBSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTable
      SubnetId:
        Ref: PrivateSubnetB

  ServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [Ref: "AWS::StackName", "SSMRole"]]
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ServerRole

  ServerEc2:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetB
    Properties:
      SubnetId:
        Ref: PrivateSubnetB
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.large
      IamInstanceProfile:
        Ref: InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Server"

Outputs:
  VPC:
    Description: "The Created VPC"
    Value: !Ref thisVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC"

  PublicSubnetA:
    Description: "Public Subnet A"
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetA"
  PublicSubnetB:
    Description: "Public Subnet B"
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetB"

  PrivateSubnetA:
    Description: "Private Subnet A"
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetA"
  PrivateSubnetB:
    Description: "Private Subnet B"
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetB"

  ServerSession:
    Description: session command for Server
    Value:
      Fn::Join:
        - " "
        - - "aws ssm start-session --target"
          - !Ref ServerEc2

  ServerIP:
    Description: Server Ip Address
    Value: !GetAtt ServerEc2.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-ServerIP"
